Ç
]C:\Repositorios\Cifrado.ini\sa-mti-crypto\sa-mti-crypto-Infrastructure\Services\KeyManager.cs
	namespace 	
sa_mti_crypto
 
. 
Infrastructure &
.& '
Services' /
{ 
public		 

sealed		 
class		 

KeyManager		 "
:		# $
IKeyManager		% 0
{

 
private 
const 
int 

Iterations $
=% &
$num' .
;. /
public 
byte 
[ 
] !
DeriveKeyFromPassword +
(+ ,
string, 2
password3 ;
,; <
byte= A
[A B
]B C
saltD H
)H I
{ 	
try 
{ 
using 
var 
pbkdf2  
=! "
new# &
Rfc2898DeriveBytes' 9
(9 :
Encoding 
. 
UTF8 
. 
GetBytes &
(& '
password' /
)/ 0
,0 1
salt 
, 

Iterations 
, 
HashAlgorithmName !
.! "
SHA512" (
)( )
;) *
return 
pbkdf2 
. 
GetBytes &
(& '
AesConstants' 3
.3 4
KEY_SIZE_BYTES4 B
)B C
;C D
} 
catch 
( 
	Exception 
ex 
)  
{ 
throw 
new "
CryptographicException 0
(0 1
$str1 H
,H I
exJ L
)L M
;M N
} 
} 	
public   
byte   
[   
]   
GenerateSalt   "
(  " #
)  # $
{!! 	
try"" 
{## 
using$$ 
var$$ 
rng$$ 
=$$ !
RandomNumberGenerator$$  5
.$$5 6
Create$$6 <
($$< =
)$$= >
;$$> ?
byte%% 
[%% 
]%% 
salt%% 
=%% 
new%% !
byte%%" &
[%%& '
$num%%' )
]%%) *
;%%* +
rng&& 
.&& 
GetBytes&& 
(&& 
salt&& !
)&&! "
;&&" #
return'' 
salt'' 
;'' 
}(( 
catch)) 
()) 
	Exception)) 
ex)) 
)))  
{** 
throw++ 
new++ "
CryptographicException++ 0
(++0 1
$str++1 G
,++G H
ex++I K
)++K L
;++L M
},, 
}.. 	
}// 
}00 ‰2
dC:\Repositorios\Cifrado.ini\sa-mti-crypto\sa-mti-crypto-Infrastructure\Services\EncryptRepository.cs
	namespace 	
sa_mti_crypto
 
. 
Infrastructure &
.& '
Services' /
{ 
public 

class 
EncryptRepository "
:# $
IEncryptRepository% 7
{ 
private		 
readonly		 
IKeyManager		 $
_keyManager		% 0
;		0 1
public 
EncryptRepository  
(  !
IKeyManager! ,

keyManager- 7
)7 8
{ 	
_keyManager 
= 

keyManager $
??% '
throw( -
new. 1!
ArgumentNullException2 G
(G H
nameofH N
(N O

keyManagerO Y
)Y Z
)Z [
;[ \
} 	
public 
byte 
[ 
] 
EncryptData !
(! "
FileInfo" *
fileInfo+ 3
,3 4
string5 ;
password< D
)D E
{ 	
if 
( 
! 
fileInfo 
. 
Exists  
)  !
throw 
new !
FileNotFoundException /
(/ 0
$str0 G
,G H
fileInfoI Q
.Q R
FullNameR Z
)Z [
;[ \
byte 
[ 
] 
data 
= 
ToolKit !
.! "
ReadFile" *
(* +
fileInfo+ 3
.3 4
FullName4 <
)< =
;= >
return 
EncryptData 
( 
data #
,# $
password% -
)- .
;. /
} 	
public 
byte 
[ 
] 
EncryptData !
(! "
string" (
	plainText) 2
,2 3
string4 :
password; C
)C D
{ 	
if 
( 
string 
. 
IsNullOrWhiteSpace )
() *
	plainText* 3
)3 4
)4 5
throw 
new 
ArgumentException +
(+ ,
$str, B
,B C
nameofD J
(J K
	plainTextK T
)T U
)U V
;V W
byte 
[ 
] 
data 
= 
System  
.  !
Text! %
.% &
Encoding& .
.. /
UTF8/ 3
.3 4
GetBytes4 <
(< =
	plainText= F
)F G
;G H
return 
EncryptData 
( 
data #
,# $
password% -
)- .
;. /
}   	
public"" 
byte"" 
["" 
]"" 
EncryptData"" !
(""! "
byte""" &
[""& '
]""' (
data"") -
,""- .
string""/ 5
password""6 >
)""> ?
{## 	
if$$ 
($$ 
data$$ 
==$$ 
null$$ 
||$$ 
data$$  $
.$$$ %
Length$$% +
==$$, .
$num$$/ 0
)$$0 1
throw%% 
new%% 
ArgumentException%% +
(%%+ ,
$str%%, =
,%%= >
nameof%%? E
(%%E F
data%%F J
)%%J K
)%%K L
;%%L M
using'' 
var'' 
aes'' 
='' 
Aes'' 
.''  
Create''  &
(''& '
)''' (
;''( )
byte(( 
[(( 
](( 
salt(( 
=(( 
_keyManager(( %
.((% &
GenerateSalt((& 2
(((2 3
)((3 4
;((4 5
byte)) 
[)) 
])) 
key)) 
=)) 
_keyManager)) $
.))$ %!
DeriveKeyFromPassword))% :
()): ;
password)); C
,))C D
salt))E I
)))I J
;))J K
try++ 
{,, 
aes-- 
.-- 
Key-- 
=-- 
key-- 
;-- 
aes.. 
... 
Mode.. 
=.. 

CipherMode.. %
...% &
CBC..& )
;..) *
aes// 
.// 
Padding// 
=// 
PaddingMode// )
.//) *
PKCS7//* /
;/// 0
aes00 
.00 

GenerateIV00 
(00 
)00  
;00  !
using22 
var22 
memoryStream22 &
=22' (
new22) ,
MemoryStream22- 9
(229 :
)22: ;
;22; <
memoryStream33 
.33 
Write33 "
(33" #
salt33# '
,33' (
$num33) *
,33* +
$num33, .
)33. /
;33/ 0
memoryStream44 
.44 
Write44 "
(44" #
aes44# &
.44& '
IV44' )
,44) *
$num44+ ,
,44, -
aes44. 1
.441 2
IV442 4
.444 5
Length445 ;
)44; <
;44< =
using66 
(66 
var66 
cryptoStream66 '
=66( )
new66* -
CryptoStream66. :
(66: ;
memoryStream66; G
,66G H
aes66I L
.66L M
CreateEncryptor66M \
(66\ ]
)66] ^
,66^ _
CryptoStreamMode66` p
.66p q
Write66q v
)66v w
)66w x
{77 
cryptoStream88  
.88  !
Write88! &
(88& '
data88' +
,88+ ,
$num88- .
,88. /
data880 4
.884 5
Length885 ;
)88; <
;88< =
}99 
return;; 
memoryStream;; #
.;;# $
ToArray;;$ +
(;;+ ,
);;, -
;;;- .
}<< 
finally== 
{>> 
Array?? 
.?? 
Clear?? 
(?? 
key?? 
,??  
$num??! "
,??" #
key??$ '
.??' (
Length??( .
)??. /
;??/ 0
}@@ 
}AA 	
}BB 
}CC ù1
dC:\Repositorios\Cifrado.ini\sa-mti-crypto\sa-mti-crypto-Infrastructure\Services\DecryptRepository.cs
	namespace 	
sa_mti_crypto
 
. 
Infrastructure &
.& '
Services' /
{ 
public 

class 
DecryptRepository "
:# $
IDecryptRepository% 7
{ 
private		 
readonly		 
IKeyManager		 $
_keyManager		% 0
;		0 1
public 
DecryptRepository  
(  !
IKeyManager! ,

keyManager- 7
)7 8
{ 	
_keyManager 
= 

keyManager $
??% '
throw( -
new. 1!
ArgumentNullException2 G
(G H
nameofH N
(N O

keyManagerO Y
)Y Z
)Z [
;[ \
} 	
public 
byte 
[ 
] 
DecryptData !
(! "
byte" &
[& '
]' (
encryptedData) 6
,6 7
string8 >
password? G
)G H
{ 	
if 
( 
encryptedData 
==  
null! %
||& (
encryptedData) 6
.6 7
Length7 =
<> ?
$num@ B
)B C
throw 
new 
ArgumentException +
(+ ,
$str, F
,F G
nameofH N
(N O
encryptedDataO \
)\ ]
)] ^
;^ _
byte 
[ 
] 
salt 
= 
new 
byte "
[" #
$num# %
]% &
;& '
byte 
[ 
] 
iv 
= 
new 
byte  
[  !
$num! #
]# $
;$ %
Buffer 
. 
	BlockCopy 
( 
encryptedData *
,* +
$num, -
,- .
salt/ 3
,3 4
$num5 6
,6 7
$num8 :
): ;
;; <
Buffer 
. 
	BlockCopy 
( 
encryptedData *
,* +
$num, .
,. /
iv0 2
,2 3
$num4 5
,5 6
$num7 9
)9 :
;: ;
byte 
[ 
] 
key 
= 
_keyManager $
.$ %!
DeriveKeyFromPassword% :
(: ;
password; C
,C D
saltE I
)I J
;J K
byte 
[ 
] 

cipherText 
= 
new  #
byte$ (
[( )
encryptedData) 6
.6 7
Length7 =
-> ?
$num@ B
]B C
;C D
Buffer 
. 
	BlockCopy 
( 
encryptedData *
,* +
$num, .
,. /

cipherText0 :
,: ;
$num< =
,= >

cipherText? I
.I J
LengthJ P
)P Q
;Q R
try 
{ 
using   
var   
aes   
=   
Aes    #
.  # $
Create  $ *
(  * +
)  + ,
;  , -
aes!! 
.!! 
Key!! 
=!! 
key!! 
;!! 
aes"" 
."" 
IV"" 
="" 
iv"" 
;"" 
aes## 
.## 
Mode## 
=## 

CipherMode## %
.##% &
CBC##& )
;##) *
aes$$ 
.$$ 
Padding$$ 
=$$ 
PaddingMode$$ )
.$$) *
PKCS7$$* /
;$$/ 0
using&& 
var&& 
memoryStream&& &
=&&' (
new&&) ,
MemoryStream&&- 9
(&&9 :
)&&: ;
;&&; <
using'' 
('' 
var'' 
cryptoStream'' '
=''( )
new''* -
CryptoStream''. :
('': ;
memoryStream''; G
,''G H
aes''I L
.''L M
CreateDecryptor''M \
(''\ ]
)''] ^
,''^ _
CryptoStreamMode''` p
.''p q
Write''q v
)''v w
)''w x
{(( 
cryptoStream))  
.))  !
Write))! &
())& '

cipherText))' 1
,))1 2
$num))3 4
,))4 5

cipherText))6 @
.))@ A
Length))A G
)))G H
;))H I
}** 
return,, 
memoryStream,, #
.,,# $
ToArray,,$ +
(,,+ ,
),,, -
;,,- .
}-- 
finally.. 
{// 
Array00 
.00 
Clear00 
(00 
key00 
,00  
$num00! "
,00" #
key00$ '
.00' (
Length00( .
)00. /
;00/ 0
}11 
}22 	
public44 
byte44 
[44 
]44 
DecryptData44 !
(44! "
string44" (

base64data44) 3
,443 4
string445 ;
password44< D
)44D E
{55 	
if66 
(66 
string66 
.66 
IsNullOrWhiteSpace66 )
(66) *

base64data66* 4
)664 5
)665 6
throw77 
new77 
ArgumentException77 +
(77+ ,
$str77, G
,77G H
nameof77I O
(77O P

base64data77P Z
)77Z [
)77[ \
;77\ ]
byte99 
[99 
]99 
data99 
=99 
System99  
.99  !
Convert99! (
.99( )
FromBase64String99) 9
(999 :

base64data99: D
)99D E
;99E F
return:: 
DecryptData:: 
(:: 
data:: #
,::# $
password::% -
)::- .
;::. /
};; 	
}<< 
}== µ%
XC:\Repositorios\Cifrado.ini\sa-mti-crypto\sa-mti-crypto-Infrastructure\Models\ToolKit.cs
	namespace 	
sa_mti_crypto
 
. 
Infrastructure &
.& '
Models' -
{ 
public 

static 
class 
ToolKit 
{ 
public		 
static		 
byte		 
[		 
]		 
ReadFile		 %
(		% &
string		& ,
path		- 1
)		1 2
{

 	
if 
( 
! 
File 
. 
Exists 
( 
path !
)! "
)" #
throw 
new !
FileNotFoundException /
(/ 0
$str0 G
,G H
pathI M
)M N
;N O
using 
var 
fs 
= 
new 

FileStream )
() *
path* .
,. /
FileMode0 8
.8 9
Open9 =
,= >

FileAccess? I
.I J
ReadJ N
)N O
;O P
byte 
[ 
] 
buffer 
= 
new 
byte  $
[$ %
fs% '
.' (
Length( .
]. /
;/ 0
_ 
= 
fs 
. 
Read 
( 
buffer 
, 
$num  !
,! "
buffer# )
.) *
Length* 0
)0 1
;1 2
return 
buffer 
; 
} 	
public 
static 
void 
SaveFile #
(# $
byte$ (
[( )
]) *
data+ /
,/ 0
string1 7

outputPath8 B
)B C
{ 	
if 
( 
data 
== 
null 
|| 
data  $
.$ %
Length% +
==, .
$num/ 0
)0 1
throw 
new !
ArgumentNullException /
(/ 0
nameof0 6
(6 7
data7 ;
); <
)< =
;= >
var 
	directory 
= 
Path  
.  !
GetDirectoryName! 1
(1 2

outputPath2 <
)< =
??> @
throw 
new 
ArgumentException +
(+ ,
$str, E
,E F
nameofG M
(M N

outputPathN X
)X Y
)Y Z
;Z [
if 
( 
! 
	Directory 
. 
Exists !
(! "
	directory" +
)+ ,
), -
	Directory 
. 
CreateDirectory )
() *
	directory* 3
)3 4
;4 5
File   
.   
WriteAllBytes   
(   

outputPath   )
,  ) *
data  + /
)  / 0
;  0 1
}!! 	
[## 	
System##	 
.## 
Security## 
.## 
SecurityCritical## )
]##) *
public$$ 
static$$ 
void$$ 
WipeData$$ #
($$# $
byte$$$ (
[$$( )
]$$) *
sensitiveData$$+ 8
)$$8 9
{%% 	
if&& 
(&& 
sensitiveData&& 
!=&&  
null&&! %
&&&&& (
sensitiveData&&) 6
.&&6 7
Length&&7 =
>&&> ?
$num&&@ A
)&&A B#
CryptographicOperations'' '
.''' (

ZeroMemory''( 2
(''2 3
sensitiveData''3 @
.''@ A
AsSpan''A G
(''G H
)''H I
)''I J
;''J K
}(( 	
public** 
static** 
string** 
GenerateOutputPath** /
(**/ 0
string**0 6
	inputPath**7 @
,**@ A
bool**B F
encrypt**G N
)**N O
{++ 	
string,, 
fileName,, 
=,, 
Path,, "
.,," #'
GetFileNameWithoutExtension,,# >
(,,> ?
	inputPath,,? H
),,H I
;,,I J
string-- 
ext-- 
=-- 
encrypt--  
?--! "
$str--# )
:--* +
$str--, 2
;--2 3
return.. 
$".. 
{.. 
fileName.. 
}.. 
{..  
ext..  #
}..# $
"..$ %
;..% &
}// 	
}00 
}11 Ù
]C:\Repositorios\Cifrado.ini\sa-mti-crypto\sa-mti-crypto-Infrastructure\Models\AesConstants.cs
	namespace 	
sa_mti_crypto
 
. 
Infrastructure &
.& '
Models' -
{ 
public 

static 
class 
AesConstants $
{ 
public 
const 
int 
KEY_SIZE_BITS &
=' (
$num) ,
;, -
public 
const 
int 
KEY_SIZE_BYTES '
=( )
$num* ,
;, -
public 
const 
int 
IV_SIZE_BYTES &
=' (
$num) +
;+ ,
} 
}		 