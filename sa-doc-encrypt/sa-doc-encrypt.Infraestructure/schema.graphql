schema {
  query: QueriesApi
  mutation: MutationsApi
}

"The `Upload` scalar type represents a file upload."
scalar Upload

type QueriesApi {
  version: ResultModelOfString!
}

type MutationsApi {
  encryptFile(input: EncryptFileInput!): EncryptFilePayload!
  decryptFile(input: DecryptFileInput!): DecryptFilePayload!
}

type ResultModelOfString {
  state: String!
  error: String!
  message: String!
  pagesInfo: PageInfo!
  custom: [String!]!
  custom3: [String!]!
  custom2: String!
}

type PageInfo {
  totalItems: Int!
  totalPages: Int!
  itemsPerPage: Int!
  previusPage: Int
  nextPage: Int
  currentPage: Int!
}

input EncryptFileInput {
  file: Upload!
}

type EncryptFilePayload {
  resultModelOfString: ResultModelOfString
}

input DecryptFileInput {
  file: Upload!
}

type DecryptFilePayload {
  resultModelOfString: ResultModelOfString
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION